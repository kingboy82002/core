<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.0.xsd">
    
     <http use-expressions="true" auto-config="true" access-denied-page="/accessDenied.jsp">
		  <!-- 不要过滤图片等静态资源，其中**代表可以跨越目录，*不可以跨越目录。 -->
		  <intercept-url pattern="/**/*.jpg" filters="none" />
		  <intercept-url pattern="/**/*.png" filters="none" />
		  <intercept-url pattern="/**/*.gif" filters="none" />
		  <intercept-url pattern="/**/*.css" filters="none" />
		  <intercept-url pattern="/**/*.js" filters="none" />
		  <!-- 登录页面和忘记密码页面不过滤 -->
		  <intercept-url pattern="/login.jsp" filters="none" />
		  <intercept-url pattern="/jsp/forgotpassword.jsp"   filters="none" /> 
		
		  <form-login login-page="/login.jsp"  authentication-failure-url="/login.jsp?error=true"   default-target-url="/index.jsp" />
		  <logout/>
		  
		  <custom-filter before="FILTER_SECURITY_INTERCEPTOR"  ref="myFilter" />
		  <!-- "记住我"功能，采用持久化策略（将用户的登录信息存放在数据库表中） -->
		  <remember-me data-source-ref="dataSource" />
		  
		  <!-- 检测失效的sessionId,超时时定位到另外一个URL -->
		  <session-management invalid-session-url="/timeout.jsp" >  
		  	<concurrency-control max-sessions="10" error-if-maximum-exceeded="true" /> 
		  </session-management> 	
     </http>
     
	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
	    我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	    <beans:bean id="myFilter" class="cn.com.free.security.MySecurityFilter">
	        <beans:property name="authenticationManager" ref="myAuthenticationManager" />
	        <beans:property name="accessDecisionManager" ref="myAccessDecisionManager" />
	        <beans:property name="securityMetadataSource" ref="mySecurityMetadataSource" />
	    </beans:bean>     
     
	<!-- 注意能够为authentication-manager 设置alias别名  -->
	 <authentication-manager alias="myAuthenticationManager">
	      <authentication-provider user-service-ref="myUserDetailServiceImpl">
	           <password-encoder ref="passwordEncoder">
	                <!-- 用户名做为盐值 -->
	                <salt-source user-property="username" />
	           </password-encoder>
	      </authentication-provider>
	 </authentication-manager>     
    
    <beans:bean id="myUserDetailServiceImpl" class="com.huaxin.security.MyUserDetailServiceImpl" >
    	<beans:property name="usersDao" ref="usersDao"></beans:property>
    </beans:bean>

    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <beans:bean id="myAccessDecisionManager" class="com.huaxin.security.MyAccessDecisionManager"/>
    
    <!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
    <beans:bean id="mySecurityMetadataSource" class="com.huaxin.security.MySecurityMetadataSource" >
    	<beans:constructor-arg name="resourcesDao" ref="resourcesDao"></beans:constructor-arg>
    </beans:bean>
</beans:beans>